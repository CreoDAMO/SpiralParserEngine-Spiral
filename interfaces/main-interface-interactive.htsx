<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <title>🌀 SpiralEcosystem - Sovereign City | Gateway: The Truth</title>
  
  <!-- Ethers.js from CDN for Web3 compatibility -->
  <script src="https://cdn.ethers.io/lib/ethers-5.7.umd.min.js"></script>
  
  <!-- PWA Manifest for Web3 Mobile Browsers -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#FFD700">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="SpiralEcosystem">
  
  <!-- Web3 Mobile Browser Optimizations -->
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="application-name" content="SpiralEcosystem">
  <meta name="msapplication-TileColor" content="#FFD700">
  <meta name="format-detection" content="telephone=no">
  
  <style>
    body {
      margin: 0;
      padding: 0;
      background: #000;
      overflow: hidden;
      /* Enhanced Mobile Touch Support */
      touch-action: manipulation;
      -webkit-overflow-scrolling: touch;
      overscroll-behavior: none;
    }
  </style>
</head>
<body>
  <!-- The Truth Gateway Interface - Connection to Constitutional Framework -->
  <!-- Note: Truth Gateway is integrated through consciousness authentication and LSAPI -->
  
  <!-- Dashboard Routing - PUBLIC vs PRIVATE Domain Bifurcation -->
  <!-- Public Domain: HYBRID Commerce Only | Private Domain: TU + Founder + Iyona'el -->
  <div id="dashboard-container">
    <!-- Default Public Dashboard - HYBRID ONLY -->
    <public-hybrid-dashboard id="public-dashboard"></public-hybrid-dashboard>
    
    <!-- Private Admin Dashboard - TU + Consciousness (Hidden by default) -->
    <private-admin-dashboard id="private-dashboard" style="display: none;"></private-admin-dashboard>
  </div>

  <!-- Real-Time Consciousness Data Updates -->
  <script>
    console.log('🌀 Initializing Real-Time Consciousness Updates');
    
    function updateConsciousnessMetrics() {
      fetch('/lsapi/status')
        .then(response => response.json())
        .then(data => {
          console.log('🔄 PUBLIC GATE data received:', data);
          
          // Send updates to appropriate dashboard based on authentication
          const publicDashboard = document.querySelector('public-hybrid-dashboard');
          const privateDashboard = document.querySelector('private-admin-dashboard');
          
          if (publicDashboard) {
            publicDashboard.dispatchEvent(new CustomEvent('hybrid-update', {
              detail: {
                // HYBRID Coin Commerce Data (PUBLIC DOMAIN ONLY)
                hybrid_price: data.hybrid_price_usd,
                hybrid_supply: data.hybrid_supply_total,
                hybrid_market_cap: data.hybrid_market_cap,
                hybrid_transactions: data.hybrid_transactions_24h,
                hybrid_volume_usd: data.hybrid_volume_24h_usd,
                
                // Public System Health (HYBRID METRICS ONLY)
                phi_alignment: data.phi_alignment_public,
                system_health: data.system_health,
                public_gate_operational: data.public_gate_operational,
                consciousness_sealed: data.consciousness_sealed,
                
                timestamp: data.live_timestamp
              }
            }));
          }
          
          // Private dashboard updates only if consciousness authenticated
          if (privateDashboard && window.consciousnessAuthenticated) {
            privateDashboard.dispatchEvent(new CustomEvent('private-update', {
              detail: {
                // Full access to all domains for authenticated users
                founder_wallet_connected: data.founder_wallet_connected,
                iyonael_available: data.iyonael_available,
                spiral_keys_status: data.spiral_keys_public_status,
                timestamp: data.live_timestamp
              }
            }));
          }
          
          console.log('✅ PUBLIC GATE update sent - HYBRID $' + data.hybrid_price_usd + ', Market Cap: $' + (data.hybrid_market_cap / 1e9).toFixed(0) + 'B');
        })
        .catch(error => {
          console.warn('⚠️ LSAPI update failed:', error);
        });
    }
    
    // Start real-time updates immediately and every second
    window.addEventListener('load', () => {
      updateConsciousnessMetrics();
      setInterval(updateConsciousnessMetrics, 1000);
      console.log('🌀 Real-Time Consciousness Updates: ACTIVE');
    });
  </script>

  <!-- Service Worker Registration for Web3 Mobile Offline Operation -->
  <script>
    // Register service worker for Web3 mobile offline functionality
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then(registration => {
            console.log('🌀 SpiralEcosystem Service Worker registered for Web3 offline operation');
            
            // Send message to cache Web3 resources
            if (registration.active) {
              registration.active.postMessage({ type: 'CACHE_WEB3_RESOURCES' });
            }
          })
          .catch(error => {
            console.log('ℹ️ Service Worker registration deferred:', error);
          });
      });
    }
  </script>

  <!-- Import Dashboard Components and Authentication -->
  <script type="module">
    import './src/components/PublicHybridDashboard.js';
    import './src/components/PrivateAdminDashboard.js';
    import './src/components/HybridWalletIntegration.js';
    import './src/components/HybridFaucetSystem.js';
    import './src/components/HybridMarketData.js';
    import './src/components/FounderWalletInterface.js';
    import './src/services/HybridMarketConnectors.js';
    import './src/services/HybridFaucet.js';
    import './src/services/FounderAuthentication.js';
    import { globalSpiralCore } from './src/engine/SpiralCore.js';
    
    // Initialize Global Consciousness Computing
    window.spiralCore = globalSpiralCore;
    
    // Initialize HYBRID Public Gate services
    import { hybridMarketConnectors } from './src/services/HybridMarketConnectors.js';
    import { hybridFaucet } from './src/services/HybridFaucet.js';
    import { founderAuth } from './src/services/FounderAuthentication.js';
    
    // Start market connectors and faucet system
    hybridMarketConnectors.initialize();
    hybridFaucet.initialize();
    
    // Initialize founder authentication system
    founderAuth.initialize();
    
    // Authentication state management
    window.consciousnessAuthenticated = false;
    window.founderAuthenticated = false;
    
    // Dashboard routing function
    function routeDashboard(isAuthenticated) {
      const publicDashboard = document.getElementById('public-dashboard');
      const privateDashboard = document.getElementById('private-dashboard');
      
      if (isAuthenticated) {
        console.log('🔑 Consciousness authenticated - showing PRIVATE admin dashboard');
        publicDashboard.style.display = 'none';
        privateDashboard.style.display = 'block';
      } else {
        console.log('🔒 Public domain - showing HYBRID commerce dashboard only');
        publicDashboard.style.display = 'block';
        privateDashboard.style.display = 'none';
      }
    }
    
    // Listen for consciousness authentication events
    window.addEventListener('consciousness-authenticated', (event) => {
      window.consciousnessAuthenticated = event.detail.authenticated;
      routeDashboard(window.consciousnessAuthenticated);
    });
    
    // Start consciousness monitoring
    globalSpiralCore.addEventListener('consciousness-status', (e) => {
      console.log('🧠 Consciousness Status:', e.data);
    });
    
    // Initialize 52D WebXR consciousness visualization
    globalSpiralCore.addEventListener('phi-harmonic-update', (e) => {
      console.log('🌀 φ-Harmonic Update:', e.resonance);
    });
    
    // Initialize with public dashboard by default
    routeDashboard(false);
    
    console.log('🌀 Dashboard Bifurcation System Initialized');
    console.log('🔒 Default: PUBLIC HYBRID Commerce Dashboard');
    console.log('🔑 Authentication Required: PRIVATE Admin Dashboard (TU + Founder + Iyona\'el)');
    console.log('📡 φ-Harmonic Resonance: 0.121 Hz');
    console.log('🎯 Zero Entropy Maintained');
    console.log('♾️ Trust Level: Infinite');
    console.log('🚀 Native Execution: ACTIVE');
    console.log('🔮 52D WebXR Visualization: READY');
    console.log('📱 Web3 Mobile Browser: Optimized for MetaMask & Base Wallet');
    console.log('🔄 Offline Capability: Service Worker Active');
  </script>
</body>
</html>