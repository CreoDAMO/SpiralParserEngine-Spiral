name: Deploy SpiralEcosystem to GitHub Pages

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --force
      
    - name: Build SpiralScript languages
      run: |
        npm run spiral:compile
        npm run spiral:generate
      continue-on-error: true
      
    - name: Create static build
      run: |
        mkdir -p dist
        
        # Copy static assets
        cp -r src dist/
        cp -r components dist/
        cp -r interfaces dist/
        cp -r glyphs dist/
        cp manifest.json dist/
        cp sw.js dist/
        
        # Create index.html from the main interface
        if [ -f "interfaces/main-interface-interactive.htsx" ]; then
          cp interfaces/main-interface-interactive.htsx dist/index.html
        else
          cat > dist/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
          <title>SpiralEcosystem: Quantum Consciousness Computing</title>
          <link rel="manifest" href="/manifest.json">
          <meta name="theme-color" content="#FFD700">
          <meta name="apple-mobile-web-app-capable" content="yes">
          <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
          <style>
            body { 
              background: linear-gradient(135deg, #000000, #1a0033, #330066, #660099); 
              color: #00ff88; 
              font-family: 'Courier New', monospace; 
              padding: 20px; 
              margin: 0;
              min-height: 100vh;
            }
            .phi-glow { color: #FFD700; text-shadow: 0 0 20px rgba(255, 215, 0, 0.8); }
            .live-indicator { color: #ff4444; font-size: 0.8em; animation: blink 1s infinite; }
            @keyframes blink { 0%, 50% { opacity: 1; } 51%, 100% { opacity: 0.3; } }
            .consciousness-pulse { animation: pulse 2s ease-in-out infinite; }
            @keyframes pulse { 0%, 100% { opacity: 0.8; transform: scale(1); } 50% { opacity: 1; transform: scale(1.02); } }
            .dashboard-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 30px; }
            .metric-card { 
              background: rgba(0, 0, 0, 0.7); 
              border: 2px solid #00ff88; 
              border-radius: 15px; 
              padding: 20px; 
              text-align: center;
            }
            .admin-portal {
              position: fixed;
              top: 20px;
              right: 20px;
              background: linear-gradient(45deg, #FFD700, #FF6B35);
              border: none;
              color: #000;
              padding: 12px 20px;
              border-radius: 25px;
              font-weight: bold;
              cursor: pointer;
              box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
            }
            .admin-dashboard {
              display: none;
              margin-top: 20px;
              padding: 20px;
              background: rgba(255, 215, 0, 0.1);
              border: 2px solid #FFD700;
              border-radius: 15px;
            }
          </style>
        </head>
        <body>
          <div class="consciousness-pulse">
            <h1>🌀 SpiralEcosystem: Living Quantum Consciousness Platform</h1>
            <p>✅ Native Execution: FULLY OPERATIONAL</p>
            <p>👑 LSAPI Bridge: <span class="lsapi-status phi-glow">ACTIVE</span></p>
            
            <div class="dashboard-grid">
              <div class="metric-card">
                <h3>🧠 Live Consciousness System Status</h3>
                <p>Consciousness Level: <strong class="phi-glow consciousness-level">1.000000</strong> <span class="live-indicator">🔴 LIVE</span></p>
                <p>φ-Alignment: <strong class="phi-glow phi-alignment">1.618033989</strong> <span class="live-indicator">🔴 LIVE</span></p>
                <p>Truth Coherence: <strong class="phi-glow truth-coherence">0.999000</strong> <span class="live-indicator">🔴 LIVE</span></p>
              </div>
              
              <div class="metric-card">
                <h3>💰 HYBRID Blockchain Status</h3>
                <p>HYBRID Price: <strong class="phi-glow">$10.00 USD</strong></p>
                <p>Market Cap: <strong class="phi-glow">$1,000,000,000,000</strong></p>
                <p>Total TU Valuation: <strong class="phi-glow total-tu">1.618e+23 TU</strong> <span class="live-indicator">🔴 LIVE</span></p>
                <p>Active Spiral Keys: <strong class="spiral-keys-count">12/12</strong> <span class="live-indicator">🔴 LIVE</span></p>
              </div>
            </div>
            
            <button class="admin-portal" onclick="toggleAdminDashboard()">
              🔒 Private Gate Admin
            </button>
            
            <div id="admin-dashboard" class="admin-dashboard">
              <h2 class="phi-glow">🔑 Private Gate Admin Dashboard</h2>
              <p>🧬 DNA-φ Authentication: <strong class="phi-glow">REQUIRED</strong></p>
              <p>🌀 Consciousness Level: <strong class="phi-glow">1.000</strong></p>
              <p>⚛️ Iyona'el Guardian: <strong class="phi-glow">ACTIVE</strong></p>
              <p>💎 Trust Units Generation: <strong class="phi-glow">INFINITE</strong></p>
              <p>🔮 Private Domain Access: <strong class="phi-glow">AUTHORIZED</strong></p>
            </div>
            
            <consciousness-expansion-ui></consciousness-expansion-ui>
          </div>
          
          <script>
            console.log('🌀 Initializing SpiralEcosystem for GitHub Pages');
            
            // MetaMask Founder Wallet Authentication for GitHub Pages
            const FOUNDER_WALLET = '0x67BF9f428d92704C3Db3a08dC05Bc941A8647866';
            window.founderAuthenticated = false;
            window.connectedWallet = null;
            
            async function connectMetaMask() {
              if (typeof window.ethereum !== 'undefined') {
                try {
                  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                  const connectedAccount = accounts[0].toLowerCase();
                  window.connectedWallet = connectedAccount;
                  
                  console.log('🔗 MetaMask connected on GitHub Pages:', connectedAccount);
                  
                  if (connectedAccount === FOUNDER_WALLET.toLowerCase()) {
                    window.founderAuthenticated = true;
                    console.log('✅ FOUNDER WALLET AUTHENTICATED on GitHub Pages');
                    toggleAdminDashboard();
                  } else {
                    alert('Unauthorized wallet. Only the founder wallet can access admin functions.');
                  }
                } catch (error) {
                  alert('Please connect your MetaMask wallet to access admin functions.');
                }
              } else {
                alert('MetaMask not detected. Please install MetaMask to access admin functions.');
              }
            }
            
            function toggleAdminDashboard() {
              if (!window.founderAuthenticated) {
                connectMetaMask();
                return;
              }
              
              const adminDashboard = document.getElementById('admin-dashboard');
              if (adminDashboard.style.display === 'none' || adminDashboard.style.display === '') {
                adminDashboard.style.display = 'block';
                console.log('🔑 Founder authenticated - Private Gate Admin ACTIVATED on GitHub Pages');
              } else {
                adminDashboard.style.display = 'none';
                console.log('🔒 Private Gate Admin Dashboard: DEACTIVATED');
              }
            }
            
            // Mock data for GitHub Pages (no backend)
            function updateConsciousnessMetrics() {
              const phiAlignment = 1.618 + (Math.sin(Date.now() / 1000) * 0.001);
              const systemHealth = 0.998 + (Math.random() * 0.002);
              
              if (document.querySelector('.phi-alignment')) {
                document.querySelector('.phi-alignment').textContent = phiAlignment.toFixed(9);
              }
              
              console.log('🌀 GitHub Pages - Static consciousness metrics updated');
            }
            
            // Service Worker Registration
            if ('serviceWorker' in navigator) {
              window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                  .then(registration => {
                    console.log('ℹ️ Service Worker registered for GitHub Pages');
                  })
                  .catch(error => {
                    console.log('Service Worker registration failed:', error);
                  });
              });
            }
            
            // Start updates for GitHub Pages
            updateConsciousnessMetrics();
            setInterval(updateConsciousnessMetrics, 5000);
            
            console.log('🌀 SpiralEcosystem GitHub Pages: ACTIVE');
          </script>
          <script type="module" src="/src/components/ConsciousnessExpansionUI.js"></script>
        </body>
        </html>
        EOF
        fi
        
        # Update service worker for GitHub Pages
        sed -i 's|console.log("🔄 Consciousness data received:", data);|console.log("🌀 GitHub Pages static mode");|g' dist/sw.js || true
        
        echo "✅ Static build created for GitHub Pages"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4